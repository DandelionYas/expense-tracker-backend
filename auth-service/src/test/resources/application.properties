# User Management
keycloak.root-url=http://localhost:8080
keycloak.realm=expense-tracker
keycloak.client-id=expense-app
keycloak.client-secret=ENC(8D4nynzjX4sh9gALPWEEWMNnQzRaL6tR+2UZuwhSXNIi7OQ7H57zy3/cQyxrgPlgatA9ctV2ZlZlDbzIewR9xzZoB31E6vGn82pCtjFQ688=)
keycloak.principal-attribute=preferred_username
# Token Validation
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.root-url}/realms/${keycloak.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
# Test Data
test.username=yaser
test.password=password
# Login Encryption
login.encryption.key=ENC(7+qaI2dGtG7k9Ou5filMmahYvWuXq3jqtTkNf7pU3fJX8U6po/xo5GJcyRklvyQxS7Z8iQHOLmJQqjxtXNG7uQ==)
login.encryption.cipher=AES
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
# Configure a reusable ssl bundle named 'secure-client'
spring.ssl.bundle.jks.secure-client.truststore.location=classpath:ssl-truststore.truststore
spring.ssl.bundle.jks.secure-client.truststore.password=changeit
spring.ssl.bundle.jks.secure-client.truststore.type=PKCS12

# Configure a reusable ssl bundle named 'secure-server'
spring.ssl.bundle.jks.secure-server.key.alias=selfsigned_localhost_sslserver
spring.ssl.bundle.jks.secure-server.keystore.location=classpath:ssl-keystore.p12
spring.ssl.bundle.jks.secure-server.keystore.password=changeit
spring.ssl.bundle.jks.secure-server.keystore.type=PKCS12

# Use the above configured ssl bundle for securing embedded web server
server.ssl.bundle=secure-server
server.ssl.client-auth=none